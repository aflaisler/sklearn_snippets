{
  "snippets": [{
      "name": "datasets",
      "code": [
        "from sklearn.datasets import make_circles",
        "from sklearn.datasets import load_digits",
        "from sklearn.datasets import fetch_20newsgroups",
        "from sklearn.datasets import load_boston",
        "from sklearn.datasets import load_iris",
        "from sklearn.datasets import make_regression, make_classification"
      ]
    }, {
      "name": "decomposition",
      "code": [
        "from sklearn.decomposition import TruncatedSVD",
        "from sklearn.decomposition import PCA, KernelPCA, SparsePCA",
        "from sklearn.decomposition import NMF"

      ]
    },
    {
      "name": "modeling cluster",
      "code": [
        "from sklearn.cluster import Kmeans",
        "from sklearn.cluster import MiniBatchKMeans",
        "from sklearn.cluster import AffinityPropagation",
        "from sklearn.cluster import MeanShift",
        "from sklearn.cluster import SpectralClustering",
        "from sklearn.cluster import AgglomerativeClustering",
        "from sklearn.cluster import DBSCAN",
        "from sklearn.mixture import GaussianMixture",
        "from sklearn.cluster import Birch",
        "from sklearn.cluster import ward_tree",
        "from sklearn.cluster.bicluster import SpectralBiclustering",
        "from sklearn.metrics import adjusted_mutual_info_score",
        "from sklearn.metrics import adjusted_rand_score",
        "from sklearn.metrics import calinski_harabaz_score",
        "from sklearn.metrics import completeness_score",
        "from sklearn.metrics import fowlkes_mallows_score",
        "from sklearn.metrics import homogeneity_completeness_v_measure",
        "from sklearn.metrics import homogeneity_score",
        "from sklearn.metrics import mutual_info_score",
        "from sklearn.metrics import normalized_mutual_info_score",
        "from sklearn.metrics import silhouette_score",
        "from sklearn.metrics import silhouette_samples",
        "from sklearn.metrics import v_measure_score"
      ]
    },
    {
      "name": "modeling classifier",
      "code": [
        "from statsmodels.graphics.gofplots import qqplot",
        "from sklearn.model_selection import train_test_split",
        "from sklearn.neural_network import MLPClassifier",
        "from sklearn.neighbors import KNeighborsClassifier",
        "from sklearn.metrics import classification_report",
        "from sklearn.svm import SVC, LinearSVC",
        "from sklearn.gaussian_process import GaussianProcessClassifier",
        "from sklearn.gaussian_process.kernels import RBF",
        "from sklearn.discriminant_analysis import LinearDiscriminantAnalysis, QuadraticDiscriminantAnalysis",
        "from sklearn.tree import DecisionTreeClassifier",
        "from sklearn.ensemble import ExtraTreesClassifier, RandomForestClassifier, AdaBoostClassifier, GradientBoostingClassifier",
        "from sklearn.naive_bayes import MultinomialNB, GaussianNB",
        "from sklearn.discriminant_analysis import QuadraticDiscriminantAnalysis",
        "from sklearn.linear_model import SGDClassifier, PassiveAggressiveClassifier",
        "from sklearn.linear_model import LogisticRegression, LogisticRegressionCV",
        "from sklearn.neural_network import MLPClassifier, BernoulliRBM",
        "from sklearn.model_selection import train_test_split, cross_val_score, GridSearchCV",
        "from sklearn.metrics import accuracy_score",
        "from sklearn.metrics import auc",
        "from sklearn.metrics import average_precision_score",
        "from sklearn.metrics import brier_score_loss",
        "from sklearn.metrics import classification_report",
        "from sklearn.metrics import cohen_kappa_score",
        "from sklearn.metrics import confusion_matrix",
        "from sklearn.metrics import f1_score",
        "from sklearn.metrics import fbeta_score",
        "from sklearn.metrics import hamming_loss",
        "from sklearn.metrics import hinge_loss",
        "from sklearn.metrics import jaccard_similarity_score",
        "from sklearn.metrics import log_loss",
        "from sklearn.metrics import matthews_corrcoef",
        "from sklearn.metrics import precision_recall_curve",
        "from sklearn.metrics import precision_recall_fscore_support",
        "from sklearn.metrics import precision_score",
        "from sklearn.metrics import recall_score",
        "from sklearn.metrics import roc_auc_score",
        "from sklearn.metrics import roc_curve",
        "from sklearn.metrics import zero_one_loss"
      ]
    }, {
      "name": "modeling regressor",
      "code": [
        "from statsmodels.graphics.gofplots import qqplot",
        "from sklearn.neural_network import MLPRegressor",
        "from sklearn.neighbors import KNeighborsRegressor",
        "from sklearn.svm import SVR",
        "from sklearn.gaussian_process import GaussianProcessRegressor",
        "from sklearn.tree import DecisionTreeRegressor",
        "from sklearn.ensemble import RandomForestRegressor, AdaBoostRegressor",
        "from sklearn.linear_model import BayesianRidge",
        "from sklearn.neural_network import MLPRegressor",
        "from sklearn.linear_model import LinearRegression, Lasso, LassoCV, Ridge, RidgeCV",
        "from sklearn.model_selection import train_test_split, cross_val_score, GridSearchCV",
        "from sklearn.metrics import explained_variance_score",
        "from sklearn.metrics import mean_absolute_error",
        "from sklearn.metrics import mean_squared_error",
        "from sklearn.metrics import mean_squared_log_error",
        "from sklearn.metrics import median_absolute_error",
        "from sklearn.metrics import r2_score"
      ]
    }, {
      "name": "NLP",
      "code": [
        "from sklearn.feature_extraction import stop_words",
        "stopwords = stop_words.ENGLISH_STOP_WORDS",
        "from textblob import TextBlob",
        "from gensim import corpora, models, matutils",
        "from sklearn.decomposition import LatentDirichletAllocation",
        "from sklearn.feature_extraction.text import CountVectorizer, TfidfVectorizer, HashingVectorizer",
        "from sklearn.feature_extraction import DictVectorizer"
      ]
    }, {
      "name": "pipeline",
      "code": ["from sklearn.preprocessing import FunctionTransformer",
        "from sklearn.base import BaseEstimator, TransformerMixin",
        "from sklearn.pipeline import FeatureUnion",
        "from sklearn.pipeline import Pipeline",
        "from sklearn.pipeline import make_pipeline",
        "from sklearn.model_selection import ParameterSampler, GridSearchCV, RandomizedSearchCV",
        "from sklearn.feature_selection import SelectKBest, chi2",
        "from sklearn.pipeline import make_union"
      ]
    }, {
      "name": "preprocessing",
      "code": [
        "from sklearn.preprocessing import Binarizer",
        "from sklearn.preprocessing import Imputer",
        "from sklearn.preprocessing import KernelCenterer",
        "from sklearn.preprocessing import MaxAbsScaler",
        "from sklearn.preprocessing import MinMaxScaler",
        "from sklearn.preprocessing import OneHotEncoder",
        "from sklearn.preprocessing import PolynomialFeatures",
        "from sklearn.preprocessing import QuantileTransformer",
        "from sklearn.preprocessing import StandardScaler",
        "from sklearn.preprocessing import add_dummy_feature",
        "from sklearn.preprocessing import binarize",
        "from sklearn.preprocessing import label_binarize",
        "from sklearn.preprocessing import minmax_scale",
        "from sklearn.preprocessing import normalize"
      ]
    }, {
      "name": "scraping",
      "code": ["from base64 import b64encode",
        "from bs4 import BeautifulSoup",
        "from scrapy.selector import Selector #By far the best",
        "from scrapy.http import HtmlResponse",
        "from selenium import webdriver",
        "from selenium.webdriver.common.by import By",
        "from selenium.webdriver.support.ui import Select",
        "from selenium.common.exceptions import NoSuchElementException"

      ]
    }, {
      "name": "psql",
      "code": [
        "import psycopg2",
        "from sqlalchemy import create_engine #Built on top of psycopg2",
        "from pandas.io import sql #Do sql.read_sql(sql_query,conn)"
      ]
    }, {
      "name": "standard",
      "code": [
        "#Loaded by default (c.f.: ~/.ipython/profile_default/startup)",
        "from statsmodels.graphics.gofplots import qqplot",
        "from __future__ import division, print_function",
        "import numpy as np",
        "import pandas as pd",
        "import matplotlib.pyplot as plt",
        "import seaborn as sns",
        "pd.set_option('display.max_columns', None)",
        "plt.style.use('fivethirtyeight')",
        "%matplotlib inline",
        "%config InlineBackend.figure_format = 'retina'"

      ]
    }

  ]
}